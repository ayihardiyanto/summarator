// Mocks generated by Mockito 5.0.7 from annotations
// in summarator/test/domain/usecases/summary_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:summarator/common/errors/failure.dart' as _i6;
import 'package:summarator/common/usecase/usecase.dart' as _i8;
import 'package:summarator/domain/entities/summary_entity.dart' as _i7;
import 'package:summarator/domain/repos/summary_repository.dart' as _i2;
import 'package:summarator/domain/usecases/summary_usecase.dart' as _i4;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeISummaryRepository extends _i1.Fake
    implements _i2.ISummaryRepository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [AddToFavoriteUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddToFavoriteUsecase extends _i1.Mock
    implements _i4.AddToFavoriteUsecase {
  MockAddToFavoriteUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ISummaryRepository get summaryRepository =>
      (super.noSuchMethod(Invocation.getter(#summaryRepository),
          returnValue: _FakeISummaryRepository()) as _i2.ISummaryRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i7.Summary? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither<_i6.Failure, bool>()))
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [UnfavoriteUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnfavoriteUsecase extends _i1.Mock implements _i4.UnfavoriteUsecase {
  MockUnfavoriteUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ISummaryRepository get summaryRepository =>
      (super.noSuchMethod(Invocation.getter(#summaryRepository),
          returnValue: _FakeISummaryRepository()) as _i2.ISummaryRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i7.Summary? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither<_i6.Failure, bool>()))
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [GetSummaryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSummaryUsecase extends _i1.Mock implements _i4.GetSummaryUsecase {
  MockGetSummaryUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ISummaryRepository get summaryRepository =>
      (super.noSuchMethod(Invocation.getter(#summaryRepository),
          returnValue: _FakeISummaryRepository()) as _i2.ISummaryRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Summary>> call(
          _i4.GetSummaryPayload? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.Summary>>.value(
                  _FakeEither<_i6.Failure, _i7.Summary>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Summary>>);
}

/// A class which mocks [ClearHistoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockClearHistoryUsecase extends _i1.Mock
    implements _i4.ClearHistoryUsecase {
  MockClearHistoryUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ISummaryRepository get summaryRepository =>
      (super.noSuchMethod(Invocation.getter(#summaryRepository),
          returnValue: _FakeISummaryRepository()) as _i2.ISummaryRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i8.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither<_i6.Failure, bool>()))
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [GetHistoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHistoryUsecase extends _i1.Mock implements _i4.GetHistoryUsecase {
  MockGetHistoryUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ISummaryRepository get summaryRepository =>
      (super.noSuchMethod(Invocation.getter(#summaryRepository),
          returnValue: _FakeISummaryRepository()) as _i2.ISummaryRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Summary>>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i7.Summary>>>.value(
              _FakeEither<_i6.Failure, List<_i7.Summary>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.Summary>>>);
}
