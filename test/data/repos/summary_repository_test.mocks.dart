// Mocks generated by Mockito 5.0.7 from annotations
// in summarator/test/data/repos/summary_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:hive/hive.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:summarator/common/errors/failure.dart' as _i8;
import 'package:summarator/common/utils/network_check.dart' as _i11;
import 'package:summarator/data/datasource/local/databases/summary_table.dart'
    as _i5;
import 'package:summarator/data/datasource/local/summary_local_datasource.dart'
    as _i12;
import 'package:summarator/data/model/summary_model.dart' as _i4;
import 'package:summarator/domain/entities/summary_entity.dart' as _i10;
import 'package:summarator/domain/repos/summary_repository.dart' as _i6;
import 'package:summarator/domain/usecases/summary_usecase.dart' as _i9;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeBox<E> extends _i1.Fake implements _i3.Box<E> {}

class _FakeSummaryModel extends _i1.Fake implements _i4.SummaryModel {}

class _FakeSummaryTable extends _i1.Fake implements _i5.SummaryTable {}

/// A class which mocks [ISummaryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockISummaryRepository extends _i1.Mock
    implements _i6.ISummaryRepository {
  MockISummaryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i4.SummaryModel>> getSummary(
          {_i9.GetSummaryPayload? payload}) =>
      (super.noSuchMethod(
          Invocation.method(#getSummary, [], {#payload: payload}),
          returnValue: Future<_i2.Either<_i8.Failure, _i4.SummaryModel>>.value(
              _FakeEither<_i8.Failure, _i4.SummaryModel>())) as _i7
          .Future<_i2.Either<_i8.Failure, _i4.SummaryModel>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, bool>> addToFavorite(
          {_i10.Summary? summary}) =>
      (super.noSuchMethod(
              Invocation.method(#addToFavorite, [], {#summary: summary}),
              returnValue: Future<_i2.Either<_i8.Failure, bool>>.value(
                  _FakeEither<_i8.Failure, bool>()))
          as _i7.Future<_i2.Either<_i8.Failure, bool>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, bool>> unfavorite(
          {_i10.Summary? summary}) =>
      (super.noSuchMethod(
              Invocation.method(#unfavorite, [], {#summary: summary}),
              returnValue: Future<_i2.Either<_i8.Failure, bool>>.value(
                  _FakeEither<_i8.Failure, bool>()))
          as _i7.Future<_i2.Either<_i8.Failure, bool>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, bool>> clearHistory() =>
      (super.noSuchMethod(Invocation.method(#clearHistory, []),
              returnValue: Future<_i2.Either<_i8.Failure, bool>>.value(
                  _FakeEither<_i8.Failure, bool>()))
          as _i7.Future<_i2.Either<_i8.Failure, bool>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i4.SummaryModel>>> getHistory() =>
      (super.noSuchMethod(Invocation.method(#getHistory, []),
              returnValue:
                  Future<_i2.Either<_i8.Failure, List<_i4.SummaryModel>>>.value(
                      _FakeEither<_i8.Failure, List<_i4.SummaryModel>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i4.SummaryModel>>>);
}

/// A class which mocks [NetworkCheck].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkCheck extends _i1.Mock implements _i11.NetworkCheck {
  @override
  _i7.Future<bool> isOnline() =>
      (super.noSuchMethod(Invocation.method(#isOnline, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
}

/// A class which mocks [SummaryLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSummaryLocalDatasource extends _i1.Mock
    implements _i12.SummaryLocalDatasource {
  @override
  set boxInstance(_i7.Future<_i3.Box<_i5.SummaryTable>>? _boxInstance) =>
      super.noSuchMethod(Invocation.setter(#boxInstance, _boxInstance),
          returnValueForMissingStub: null);
  @override
  _i7.Future<_i3.Box<_i5.SummaryTable>> get getBoxInstance =>
      (super.noSuchMethod(Invocation.getter(#getBoxInstance),
              returnValue: Future<_i3.Box<_i5.SummaryTable>>.value(
                  _FakeBox<_i5.SummaryTable>()))
          as _i7.Future<_i3.Box<_i5.SummaryTable>>);
  @override
  _i7.Future<List<String>> get keys => (super.noSuchMethod(
          Invocation.getter(#keys),
          returnValue: Future<List<String>>.value(<String>[]))
      as _i7.Future<List<String>>);
  @override
  _i7.Future<List<_i4.SummaryModel>> getFormattedData() =>
      (super.noSuchMethod(Invocation.method(#getFormattedData, []),
              returnValue:
                  Future<List<_i4.SummaryModel>>.value(<_i4.SummaryModel>[]))
          as _i7.Future<List<_i4.SummaryModel>>);
  @override
  _i7.Future<_i4.SummaryModel?> getFormattedItem(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFormattedItem, [key]),
              returnValue: Future<_i4.SummaryModel?>.value(_FakeSummaryModel()))
          as _i7.Future<_i4.SummaryModel?>);
  @override
  _i7.Future<void> insertOrUpdateItems(List<_i4.SummaryModel>? type,
          {bool? checkIsUpdated = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #insertOrUpdateItems, [type], {#checkIsUpdated: checkIsUpdated}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> insertOrUpdateItem(_i4.SummaryModel? model, String? key,
          {bool? checkIsUpdated = false}) =>
      (super.noSuchMethod(
          Invocation.method(#insertOrUpdateItem, [model, key],
              {#checkIsUpdated: checkIsUpdated}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i5.SummaryTable?> get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key]),
              returnValue: Future<_i5.SummaryTable?>.value(_FakeSummaryTable()))
          as _i7.Future<_i5.SummaryTable?>);
  @override
  _i7.Future<List<_i5.SummaryTable>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue:
                  Future<List<_i5.SummaryTable>>.value(<_i5.SummaryTable>[]))
          as _i7.Future<List<_i5.SummaryTable>>);
  @override
  _i7.Future<void> put(String? key, _i5.SummaryTable? value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> putAll(Map<String, _i5.SummaryTable>? items) =>
      (super.noSuchMethod(Invocation.method(#putAll, [items]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> delete(String? key) =>
      (super.noSuchMethod(Invocation.method(#delete, [key]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteAll() =>
      (super.noSuchMethod(Invocation.method(#deleteAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
}
